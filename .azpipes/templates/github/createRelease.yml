parameters:
  - name: workingDirectory
    type: string

  - name: githubRepository
    type: string

  - name: version
    type: string

  - name: githubConnection
    type: string

  - name: isPreRelease
    type: boolean

  - name: addChangeLog
    type: boolean

  - name: githubAccessToken
    type: string

steps:
  - task: ArchiveFiles@2
    displayName: Archiving release v${{ parameters.version }}
    inputs:
      rootFolderOrFile: ${{ parameters.workingDirectory }}
      includeRootFolder: false
      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip

  - pwsh: |
      $repository = '${{ parameters.githubRepository }}'
      $version = 'v$${{ parameters.version }}'

      gh release view $version --repo $repository

      if ($LASTEXITCODE -eq 0)
      {
          "Release detected. Setting Action to 'edit'"
          "##vso[task.setvariable variable=ghReleaseAction]edit"
      }
      elseif ($LASTEXITCODE -eq 1)
      {
          "Release NOT detected. Setting Action to 'create'"
          "##vso[task.setvariable variable=ghReleaseAction]create"
      }
      else
      {
          "LastExitCode was not known. LastExitCode = $LASTEXITCODE"
          Exit($LASTEXITCODE)
      }
    displayName: Detect if github Release is already present
    env:
      GITHUB_TOKEN: ${{ parameters.githubAccessToken }}

  - task: GitHubRelease@1
    displayName: "Create GitHub release v${{ parameters.version }}"
    inputs:
      gitHubConnection: ${{ parameters.githubConnection }}
      tagSource: userSpecifiedTag
      tag: v${{ parameters.version }}
      title: v${{ parameters.version }}
      isPreRelease: ${{ parameters.isPreRelease }}
      addChangeLog: ${{ parameters.addChangeLog }}
      assets: $(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip
